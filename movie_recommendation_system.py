# -*- coding: utf-8 -*-
"""Movie_Recommendation_System.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_JEmXtO-7qI9bA5V3pOC9SXxK-jbwDF6
"""

import pandas as pd

# Read Dataset.csv
dataset_df = pd.read_csv("/content/Dataset.csv")

# Read Movie_Id_Titles.csv
movie_titles_df = pd.read_csv("/content/Movie_Id_Titles.csv")

# Merge the datasets on MovieID
merged_df = pd.merge(dataset_df, movie_titles_df, on='item_id')

# Drop any rows with missing values
merged_df.dropna(inplace=True)

# Check if there are any duplicates and drop them
merged_df.drop_duplicates(inplace=True)

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the data
dataset_df = pd.read_csv("/content/Dataset.csv")
movie_titles_df = pd.read_csv("/content/Movie_Id_Titles.csv")

# Merge the datasets on MovieID
merged_df = pd.merge(dataset_df, movie_titles_df, on='item_id')

# Drop any rows with missing values
merged_df.dropna(inplace=True)

# Check for duplicates and drop them
merged_df.drop_duplicates(inplace=True)

# Distribution of Movie Ratings
plt.figure(figsize=(10, 6))
sns.countplot(x='rating', data=merged_df)
plt.title('Distribution of Movie Ratings')
plt.xlabel('Rating')
plt.ylabel('Count')
plt.show()

# Analyze most popular genres (if available in the dataset)
# Example: Extract genres from movie titles and analyze
# (This part may vary depending on how the genres are represented in your dataset)

# User Preferences
# Group by movie title and calculate average rating
movie_ratings = merged_df.groupby('title')['rating'].mean()
# Sort by average rating in descending order to find highest-rated movies
top_rated_movies = movie_ratings.sort_values(ascending=False)[:10]
# Sort by average rating in ascending order to find lowest-rated movies
bottom_rated_movies = movie_ratings.sort_values()[:10]

print("Top 10 Highest Rated Movies:")
print(top_rated_movies)
print("\nTop 10 Lowest Rated Movies:")
print(bottom_rated_movies)

import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

# Create User-Movie Matrix
user_movie_matrix = merged_df.pivot_table(index='user_id', columns='title', values='rating')

# Fill NaN values with 0 (assuming NaN means the user hasn't rated the movie)
user_movie_matrix = user_movie_matrix.fillna(0)

# Compute User Similarity (using cosine similarity)
user_similarity = cosine_similarity(user_movie_matrix)

# Function to get top N similar users for a given user
def get_top_similar_users(user_id, similarity_matrix, n=5):
    user_index = user_id - 1  # Adjust for 0-based indexing
    similar_users = np.argsort(similarity_matrix[user_index])[::-1][1:n+1] + 1  # Exclude user's own index
    return similar_users

# Function to generate movie recommendations for a user
def generate_recommendations(user_id, user_movie_matrix, similarity_matrix, n=10):
    similar_users = get_top_similar_users(user_id, similarity_matrix)
    user_ratings = user_movie_matrix.loc[user_id]
    recommendations = {}
    for similar_user in similar_users:
        similar_user_ratings = user_movie_matrix.loc[similar_user]
        unrated_movies = similar_user_ratings[user_ratings == 0]  # Movies not rated by the target user
        recommended_movies = unrated_movies.sort_values(ascending=False)[:n]
        recommendations[similar_user] = recommended_movies
    return recommendations

# Example: Generate recommendations for a user (replace 1 with the desired user ID)
user_id = 1
recommendations = generate_recommendations(user_id, user_movie_matrix, user_similarity)
print("Recommendations for User", user_id)
for similar_user, recommended_movies in recommendations.items():
    print("Similar User:", similar_user)
    print(recommended_movies)
    print()

from surprise import Dataset, Reader, KNNBasic
from surprise.model_selection import cross_validate

# Load data into Surprise format
reader = Reader(rating_scale=(1, 5))
data = Dataset.load_from_df(merged_df[['user_id', 'item_id', 'rating']], reader)

# Use KNNBasic algorithm for user-based collaborative filtering
sim_options = {'name': 'cosine', 'user_based': True}
algo = KNNBasic(sim_options=sim_options)

# Perform cross-validation
cross_validate(algo, data, measures=['RMSE', 'MAE'], cv=5, verbose=True)

# Use KNNBasic algorithm for item-based collaborative filtering
sim_options = {'name': 'cosine', 'user_based': False}
algo_item = KNNBasic(sim_options=sim_options)

# Perform cross-validation
cross_validate(algo_item, data, measures=['RMSE', 'MAE'], cv=5, verbose=True)

merged_df

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

# Replace missing values with empty string
merged_df['title'] = merged_df['title'].fillna('')

# TF-IDF Vectorization
tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(merged_df['title'])

# Compute cosine similarity matrix
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

# Function to recommend similar movies based on content
def content_based_recommendations(title, cosine_sim=cosine_sim, movies=merged_df):
    # Get the index of the movie that matches the title
    idx = movies[movies['title'] == title].index[0]

    # Get the pairwsie similarity scores of all movies with that movie
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Sort the movies based on the similarity scores
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Get the top 10 most similar movies
    sim_scores = sim_scores[1:11]

    # Get the movie indices
    movie_indices = [i[0] for i in sim_scores]

    # Return the top 10 most similar movies
    return movies['title'].iloc[movie_indices]

# User Interface
def user_interface():
    print("Welcome to Movie Recommender!")
    while True:
        print("\nEnter a movie title or 'quit' to exit:")
        user_input = input()
        if user_input.lower() == 'quit':
            print("Thank you for using Movie Recommender. Goodbye!")
            break
        else:
            recommendations = content_based_recommendations(user_input)
            print("\nRecommended movies based on your input:")
            print(recommendations)

# Example usage:
user_interface()